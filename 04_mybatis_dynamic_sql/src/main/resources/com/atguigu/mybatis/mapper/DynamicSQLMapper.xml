<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC " -//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mapper.DynamicSQLMapper">

    <!--
    动态SQL:
    1. if，通过test属性中的表达式判断标签中的内容是否有效(是否会拼接到sql中)
    2. where
        a. 若where标签中有条件成立，会自动生成where关键字
        b. 需要时，会自动将where标签中条件语句前的and去掉，但是无法去掉语句后面的and
        c. 若where标签中没有任何一个条件成立，where语句也不会出现在最终生成的sql语句中
    3. trim
        prefix, suffix: 在标签中的内容前面或后面添加指定的内容
        prefixOverrides, suffixOverrides: 需要时，在标签中内容的前面或后面去掉指定的内容
    4. choose, when, otherwise
        相当于Java中的if...else if...else
        when至少要有一个，otherwise最多有一个
    5. foreach
        collection: 指定要循环的数组或集合
        item: 用一个标识符表示数组或集合中的每一个数据
        separator: 指定每次循环数据之间的分隔符
        open: 指定在整个循环之前以什么开始
        close: 指定在整个循环之前以什么结束
    -->

    <!-- List<Emp> getEmpByCondition(Emp emp); -->
    <select id="getEmpByCondition" resultType="Emp">
        select *
        from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName != ''">
                emp_name = #{empName} and
            </if>
            <if test="age != null and age != ''">
                age = #{age} and
            </if>
            <if test="gender != null and gender != ''">
                gender = #{gender}
            </if>
        </trim>
    </select>

    <select id="getEmpByConditionTwo" resultType="Emp">
        select *
        from t_emp
        <where>
            <if test="empName != null and empName != ''">
                and emp_name = #{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="gender != null and gender != ''">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <select id="getEmpByConditionOne" resultType="Emp">
        select *
        from t_emp
        where 1 = 1
        <if test="empName != null and empName != ''">
            and emp_name = #{empName}
        </if>
        <if test="age != null and age != ''">
            and age = #{age}
        </if>
        <if test="gender != null and gender != ''">
            and gender = #{gender}
        </if>
    </select>


    <!-- List<Emp> getEmpByChoose(Emp emp); -->
    <select id="getEmpByChoose" resultType="Emp">
        select *
        from t_emp
        <where>
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age != ''">
                    age = #{age}
                </when>
                <when test="gender != null and gender != ''">
                    gender = #{gender}
                </when>
            </choose>
        </where>
    </select>

    <!-- void insertMoreEmps(@Param("emps") List<Emp> emps); -->
    <insert id="insertMoreEmps">
        insert into t_emp
        values
        <foreach collection="emps" item="emp" separator=",">
            (null, #{emp.empName}, #{emp.age}, #{emp.gender}, null)
        </foreach>
    </insert>

    <!-- void deleteMoreEmps(@Param("empIds") Integer[] empIds); -->
    <!-- 第三种方式 -->
    <delete id="deleteMoreEmps">
        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
    </delete>

    <!-- 第二种方式 -->
    <delete id="deleteMoreEmpsTwo">
        delete from t_emp where emp_id in
        <foreach collection="empIds" item="empId" separator="," open="(" close=")">
            #{empId}
        </foreach>
    </delete>

    <!-- 第一种方式 -->
    <delete id="deleteMoreEmpsOne">
        delete from t_emp where emp_id in
        (
        <foreach collection="empIds" item="empId" separator=",">
            #{empId}
        </foreach>
        )
    </delete>
</mapper>